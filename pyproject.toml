[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "baltic-bokeh"
version = "0.1.0"
description = "Interactive phylogenetic tree visualization using Bokeh and Baltic"
readme = "README.md"
license = {file = "LICENSE"}
authors = [
    {name = "Sanjay C Nagi", email = "sanjay.c.nagi@gmail.com"},
]
keywords = ["phylogenetics", "visualization", "bokeh", "interactive", "trees"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
]
requires-python = ">=3.8"
dependencies = [
    "baltic>=0.3.0",
    "bokeh>=3.0.0",
    "pandas>=1.0.0",
    "numpy>=1.18.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=6.0.0",
    "pytest-cov>=3.0.0",
    "black>=22.0.0",
    "isort>=5.0.0",
    "flake8>=4.0.0",
    "mypy>=0.900",
]

[project.urls]
Homepage = "https://github.com/sanjaynagi/baltic-bokeh"
Issues = "https://github.com/sanjaynagi/baltic-bokeh/issues"

[tool.hatch.build.targets.wheel]
packages = ["baltic_bokeh"]

[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "unit: marks tests as unit tests",
    "integration: marks tests as integration tests",
]

[tool.coverage.run]
source = ["baltic_bokeh"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
